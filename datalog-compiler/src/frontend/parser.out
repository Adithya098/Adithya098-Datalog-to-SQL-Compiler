Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement program
Rule 2     program -> statement
Rule 3     program -> empty
Rule 4     empty -> <empty>
Rule 5     statement -> assertion
Rule 6     statement -> retraction
Rule 7     statement -> query
Rule 8     statement -> requirement
Rule 9     assertion -> clause DECIMAL
Rule 10    retraction -> clause TILDE
Rule 11    query -> literal QUESTION_MARK
Rule 12    requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET
Rule 13    clause -> literal HEAD_AND_BODY_SEPARATOR body
Rule 14    clause -> literal
Rule 15    body -> literal COMMA body
Rule 16    body -> literal
Rule 17    literal -> predicate LEFT_BRACKET RIGHT_BRACKET
Rule 18    literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET
Rule 19    literal -> predicate
Rule 20    literal -> term EQUAL term
Rule 21    literal -> term NOT_EQUAL term
Rule 22    literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
Rule 23    predicate -> IDENTIFIER
Rule 24    predicate -> STRING
Rule 25    terms -> term COMMA terms
Rule 26    terms -> term
Rule 27    term -> VARIABLE
Rule 28    term -> constant
Rule 29    constant -> IDENTIFIER
Rule 30    constant -> STRING
Rule 31    constant -> INTEGER
Rule 32    constant -> BOOLEAN

Terminals, with rules where they appear

BOOLEAN              : 32
COMMA                : 15 25
COMMENT              : 
DECIMAL              : 9
EQUAL                : 20
HEAD_AND_BODY_SEPARATOR : 13 22
IDENTIFIER           : 12 22 23 29
INTEGER              : 31
LEFT_BRACKET         : 12 17 18 22
NOT_EQUAL            : 21
QUESTION_MARK        : 11
RIGHT_BRACKET        : 12 17 18 22
STRING               : 24 30
TILDE                : 10
VARIABLE             : 22 27
error                : 

Nonterminals, with rules where they appear

assertion            : 5
body                 : 13 15
clause               : 9 10
constant             : 28
empty                : 3
literal              : 11 13 14 15 16
predicate            : 17 18 19
program              : 1 0
query                : 7
requirement          : 8
retraction           : 6
statement            : 1 2
term                 : 20 20 21 21 25 26
terms                : 18 22 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement program
    (2) program -> . statement
    (3) program -> . empty
    (5) statement -> . assertion
    (6) statement -> . retraction
    (7) statement -> . query
    (8) statement -> . requirement
    (4) empty -> .
    (9) assertion -> . clause DECIMAL
    (10) retraction -> . clause TILDE
    (11) query -> . literal QUESTION_MARK
    (12) requirement -> . LEFT_BRACKET IDENTIFIER RIGHT_BRACKET
    (13) clause -> . literal HEAD_AND_BODY_SEPARATOR body
    (14) clause -> . literal
    (17) literal -> . predicate LEFT_BRACKET RIGHT_BRACKET
    (18) literal -> . predicate LEFT_BRACKET terms RIGHT_BRACKET
    (19) literal -> . predicate
    (20) literal -> . term EQUAL term
    (21) literal -> . term NOT_EQUAL term
    (22) literal -> . VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
    (23) predicate -> . IDENTIFIER
    (24) predicate -> . STRING
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    $end            reduce using rule 4 (empty -> .)
    LEFT_BRACKET    shift and go to state 10
    VARIABLE        shift and go to state 14
    IDENTIFIER      shift and go to state 11
    STRING          shift and go to state 15
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    assertion                      shift and go to state 4
    retraction                     shift and go to state 5
    query                          shift and go to state 6
    requirement                    shift and go to state 7
    clause                         shift and go to state 8
    literal                        shift and go to state 9
    predicate                      shift and go to state 12
    term                           shift and go to state 13
    constant                       shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> statement . program
    (2) program -> statement .
    (1) program -> . statement program
    (2) program -> . statement
    (3) program -> . empty
    (5) statement -> . assertion
    (6) statement -> . retraction
    (7) statement -> . query
    (8) statement -> . requirement
    (4) empty -> .
    (9) assertion -> . clause DECIMAL
    (10) retraction -> . clause TILDE
    (11) query -> . literal QUESTION_MARK
    (12) requirement -> . LEFT_BRACKET IDENTIFIER RIGHT_BRACKET
    (13) clause -> . literal HEAD_AND_BODY_SEPARATOR body
    (14) clause -> . literal
    (17) literal -> . predicate LEFT_BRACKET RIGHT_BRACKET
    (18) literal -> . predicate LEFT_BRACKET terms RIGHT_BRACKET
    (19) literal -> . predicate
    (20) literal -> . term EQUAL term
    (21) literal -> . term NOT_EQUAL term
    (22) literal -> . VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
    (23) predicate -> . IDENTIFIER
    (24) predicate -> . STRING
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    LEFT_BRACKET    shift and go to state 10
    VARIABLE        shift and go to state 14
    IDENTIFIER      shift and go to state 11
    STRING          shift and go to state 15
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

  ! $end            [ reduce using rule 4 (empty -> .) ]

    statement                      shift and go to state 2
    program                        shift and go to state 19
    empty                          shift and go to state 3
    assertion                      shift and go to state 4
    retraction                     shift and go to state 5
    query                          shift and go to state 6
    requirement                    shift and go to state 7
    clause                         shift and go to state 8
    literal                        shift and go to state 9
    predicate                      shift and go to state 12
    term                           shift and go to state 13
    constant                       shift and go to state 16

state 3

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 4

    (5) statement -> assertion .

    LEFT_BRACKET    reduce using rule 5 (statement -> assertion .)
    VARIABLE        reduce using rule 5 (statement -> assertion .)
    IDENTIFIER      reduce using rule 5 (statement -> assertion .)
    STRING          reduce using rule 5 (statement -> assertion .)
    INTEGER         reduce using rule 5 (statement -> assertion .)
    BOOLEAN         reduce using rule 5 (statement -> assertion .)
    $end            reduce using rule 5 (statement -> assertion .)


state 5

    (6) statement -> retraction .

    LEFT_BRACKET    reduce using rule 6 (statement -> retraction .)
    VARIABLE        reduce using rule 6 (statement -> retraction .)
    IDENTIFIER      reduce using rule 6 (statement -> retraction .)
    STRING          reduce using rule 6 (statement -> retraction .)
    INTEGER         reduce using rule 6 (statement -> retraction .)
    BOOLEAN         reduce using rule 6 (statement -> retraction .)
    $end            reduce using rule 6 (statement -> retraction .)


state 6

    (7) statement -> query .

    LEFT_BRACKET    reduce using rule 7 (statement -> query .)
    VARIABLE        reduce using rule 7 (statement -> query .)
    IDENTIFIER      reduce using rule 7 (statement -> query .)
    STRING          reduce using rule 7 (statement -> query .)
    INTEGER         reduce using rule 7 (statement -> query .)
    BOOLEAN         reduce using rule 7 (statement -> query .)
    $end            reduce using rule 7 (statement -> query .)


state 7

    (8) statement -> requirement .

    LEFT_BRACKET    reduce using rule 8 (statement -> requirement .)
    VARIABLE        reduce using rule 8 (statement -> requirement .)
    IDENTIFIER      reduce using rule 8 (statement -> requirement .)
    STRING          reduce using rule 8 (statement -> requirement .)
    INTEGER         reduce using rule 8 (statement -> requirement .)
    BOOLEAN         reduce using rule 8 (statement -> requirement .)
    $end            reduce using rule 8 (statement -> requirement .)


state 8

    (9) assertion -> clause . DECIMAL
    (10) retraction -> clause . TILDE

    DECIMAL         shift and go to state 20
    TILDE           shift and go to state 21


state 9

    (11) query -> literal . QUESTION_MARK
    (13) clause -> literal . HEAD_AND_BODY_SEPARATOR body
    (14) clause -> literal .

    QUESTION_MARK   shift and go to state 22
    HEAD_AND_BODY_SEPARATOR shift and go to state 23
    DECIMAL         reduce using rule 14 (clause -> literal .)
    TILDE           reduce using rule 14 (clause -> literal .)


state 10

    (12) requirement -> LEFT_BRACKET . IDENTIFIER RIGHT_BRACKET

    IDENTIFIER      shift and go to state 24


state 11

    (23) predicate -> IDENTIFIER .
    (29) constant -> IDENTIFIER .

    LEFT_BRACKET    reduce using rule 23 (predicate -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 23 (predicate -> IDENTIFIER .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 23 (predicate -> IDENTIFIER .)
    DECIMAL         reduce using rule 23 (predicate -> IDENTIFIER .)
    TILDE           reduce using rule 23 (predicate -> IDENTIFIER .)
    COMMA           reduce using rule 23 (predicate -> IDENTIFIER .)
    EQUAL           reduce using rule 29 (constant -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 29 (constant -> IDENTIFIER .)


state 12

    (17) literal -> predicate . LEFT_BRACKET RIGHT_BRACKET
    (18) literal -> predicate . LEFT_BRACKET terms RIGHT_BRACKET
    (19) literal -> predicate .

    LEFT_BRACKET    shift and go to state 25
    QUESTION_MARK   reduce using rule 19 (literal -> predicate .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 19 (literal -> predicate .)
    DECIMAL         reduce using rule 19 (literal -> predicate .)
    TILDE           reduce using rule 19 (literal -> predicate .)
    COMMA           reduce using rule 19 (literal -> predicate .)


state 13

    (20) literal -> term . EQUAL term
    (21) literal -> term . NOT_EQUAL term

    EQUAL           shift and go to state 26
    NOT_EQUAL       shift and go to state 27


state 14

    (22) literal -> VARIABLE . HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
    (27) term -> VARIABLE .

    HEAD_AND_BODY_SEPARATOR shift and go to state 28
    EQUAL           reduce using rule 27 (term -> VARIABLE .)
    NOT_EQUAL       reduce using rule 27 (term -> VARIABLE .)


state 15

    (24) predicate -> STRING .
    (30) constant -> STRING .

    LEFT_BRACKET    reduce using rule 24 (predicate -> STRING .)
    QUESTION_MARK   reduce using rule 24 (predicate -> STRING .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 24 (predicate -> STRING .)
    DECIMAL         reduce using rule 24 (predicate -> STRING .)
    TILDE           reduce using rule 24 (predicate -> STRING .)
    COMMA           reduce using rule 24 (predicate -> STRING .)
    EQUAL           reduce using rule 30 (constant -> STRING .)
    NOT_EQUAL       reduce using rule 30 (constant -> STRING .)


state 16

    (28) term -> constant .

    EQUAL           reduce using rule 28 (term -> constant .)
    NOT_EQUAL       reduce using rule 28 (term -> constant .)
    COMMA           reduce using rule 28 (term -> constant .)
    RIGHT_BRACKET   reduce using rule 28 (term -> constant .)
    QUESTION_MARK   reduce using rule 28 (term -> constant .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 28 (term -> constant .)
    DECIMAL         reduce using rule 28 (term -> constant .)
    TILDE           reduce using rule 28 (term -> constant .)


state 17

    (31) constant -> INTEGER .

    EQUAL           reduce using rule 31 (constant -> INTEGER .)
    NOT_EQUAL       reduce using rule 31 (constant -> INTEGER .)
    COMMA           reduce using rule 31 (constant -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 31 (constant -> INTEGER .)
    QUESTION_MARK   reduce using rule 31 (constant -> INTEGER .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 31 (constant -> INTEGER .)
    DECIMAL         reduce using rule 31 (constant -> INTEGER .)
    TILDE           reduce using rule 31 (constant -> INTEGER .)


state 18

    (32) constant -> BOOLEAN .

    EQUAL           reduce using rule 32 (constant -> BOOLEAN .)
    NOT_EQUAL       reduce using rule 32 (constant -> BOOLEAN .)
    COMMA           reduce using rule 32 (constant -> BOOLEAN .)
    RIGHT_BRACKET   reduce using rule 32 (constant -> BOOLEAN .)
    QUESTION_MARK   reduce using rule 32 (constant -> BOOLEAN .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 32 (constant -> BOOLEAN .)
    DECIMAL         reduce using rule 32 (constant -> BOOLEAN .)
    TILDE           reduce using rule 32 (constant -> BOOLEAN .)


state 19

    (1) program -> statement program .

    $end            reduce using rule 1 (program -> statement program .)


state 20

    (9) assertion -> clause DECIMAL .

    LEFT_BRACKET    reduce using rule 9 (assertion -> clause DECIMAL .)
    VARIABLE        reduce using rule 9 (assertion -> clause DECIMAL .)
    IDENTIFIER      reduce using rule 9 (assertion -> clause DECIMAL .)
    STRING          reduce using rule 9 (assertion -> clause DECIMAL .)
    INTEGER         reduce using rule 9 (assertion -> clause DECIMAL .)
    BOOLEAN         reduce using rule 9 (assertion -> clause DECIMAL .)
    $end            reduce using rule 9 (assertion -> clause DECIMAL .)


state 21

    (10) retraction -> clause TILDE .

    LEFT_BRACKET    reduce using rule 10 (retraction -> clause TILDE .)
    VARIABLE        reduce using rule 10 (retraction -> clause TILDE .)
    IDENTIFIER      reduce using rule 10 (retraction -> clause TILDE .)
    STRING          reduce using rule 10 (retraction -> clause TILDE .)
    INTEGER         reduce using rule 10 (retraction -> clause TILDE .)
    BOOLEAN         reduce using rule 10 (retraction -> clause TILDE .)
    $end            reduce using rule 10 (retraction -> clause TILDE .)


state 22

    (11) query -> literal QUESTION_MARK .

    LEFT_BRACKET    reduce using rule 11 (query -> literal QUESTION_MARK .)
    VARIABLE        reduce using rule 11 (query -> literal QUESTION_MARK .)
    IDENTIFIER      reduce using rule 11 (query -> literal QUESTION_MARK .)
    STRING          reduce using rule 11 (query -> literal QUESTION_MARK .)
    INTEGER         reduce using rule 11 (query -> literal QUESTION_MARK .)
    BOOLEAN         reduce using rule 11 (query -> literal QUESTION_MARK .)
    $end            reduce using rule 11 (query -> literal QUESTION_MARK .)


state 23

    (13) clause -> literal HEAD_AND_BODY_SEPARATOR . body
    (15) body -> . literal COMMA body
    (16) body -> . literal
    (17) literal -> . predicate LEFT_BRACKET RIGHT_BRACKET
    (18) literal -> . predicate LEFT_BRACKET terms RIGHT_BRACKET
    (19) literal -> . predicate
    (20) literal -> . term EQUAL term
    (21) literal -> . term NOT_EQUAL term
    (22) literal -> . VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
    (23) predicate -> . IDENTIFIER
    (24) predicate -> . STRING
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 14
    IDENTIFIER      shift and go to state 11
    STRING          shift and go to state 15
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    literal                        shift and go to state 29
    body                           shift and go to state 30
    predicate                      shift and go to state 12
    term                           shift and go to state 13
    constant                       shift and go to state 16

state 24

    (12) requirement -> LEFT_BRACKET IDENTIFIER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 31


state 25

    (17) literal -> predicate LEFT_BRACKET . RIGHT_BRACKET
    (18) literal -> predicate LEFT_BRACKET . terms RIGHT_BRACKET
    (25) terms -> . term COMMA terms
    (26) terms -> . term
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    RIGHT_BRACKET   shift and go to state 32
    VARIABLE        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 37
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    terms                          shift and go to state 33
    term                           shift and go to state 34
    constant                       shift and go to state 16

state 26

    (20) literal -> term EQUAL . term
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 37
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    term                           shift and go to state 38
    constant                       shift and go to state 16

state 27

    (21) literal -> term NOT_EQUAL . term
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 37
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    term                           shift and go to state 39
    constant                       shift and go to state 16

state 28

    (22) literal -> VARIABLE HEAD_AND_BODY_SEPARATOR . IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET

    IDENTIFIER      shift and go to state 40


state 29

    (15) body -> literal . COMMA body
    (16) body -> literal .

    COMMA           shift and go to state 41
    DECIMAL         reduce using rule 16 (body -> literal .)
    TILDE           reduce using rule 16 (body -> literal .)


state 30

    (13) clause -> literal HEAD_AND_BODY_SEPARATOR body .

    DECIMAL         reduce using rule 13 (clause -> literal HEAD_AND_BODY_SEPARATOR body .)
    TILDE           reduce using rule 13 (clause -> literal HEAD_AND_BODY_SEPARATOR body .)


state 31

    (12) requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    STRING          reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    INTEGER         reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    BOOLEAN         reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)
    $end            reduce using rule 12 (requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET .)


state 32

    (17) literal -> predicate LEFT_BRACKET RIGHT_BRACKET .

    QUESTION_MARK   reduce using rule 17 (literal -> predicate LEFT_BRACKET RIGHT_BRACKET .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 17 (literal -> predicate LEFT_BRACKET RIGHT_BRACKET .)
    DECIMAL         reduce using rule 17 (literal -> predicate LEFT_BRACKET RIGHT_BRACKET .)
    TILDE           reduce using rule 17 (literal -> predicate LEFT_BRACKET RIGHT_BRACKET .)
    COMMA           reduce using rule 17 (literal -> predicate LEFT_BRACKET RIGHT_BRACKET .)


state 33

    (18) literal -> predicate LEFT_BRACKET terms . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 42


state 34

    (25) terms -> term . COMMA terms
    (26) terms -> term .

    COMMA           shift and go to state 43
    RIGHT_BRACKET   reduce using rule 26 (terms -> term .)


state 35

    (27) term -> VARIABLE .

    COMMA           reduce using rule 27 (term -> VARIABLE .)
    RIGHT_BRACKET   reduce using rule 27 (term -> VARIABLE .)
    QUESTION_MARK   reduce using rule 27 (term -> VARIABLE .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 27 (term -> VARIABLE .)
    DECIMAL         reduce using rule 27 (term -> VARIABLE .)
    TILDE           reduce using rule 27 (term -> VARIABLE .)


state 36

    (29) constant -> IDENTIFIER .

    COMMA           reduce using rule 29 (constant -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 29 (constant -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 29 (constant -> IDENTIFIER .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 29 (constant -> IDENTIFIER .)
    DECIMAL         reduce using rule 29 (constant -> IDENTIFIER .)
    TILDE           reduce using rule 29 (constant -> IDENTIFIER .)


state 37

    (30) constant -> STRING .

    COMMA           reduce using rule 30 (constant -> STRING .)
    RIGHT_BRACKET   reduce using rule 30 (constant -> STRING .)
    QUESTION_MARK   reduce using rule 30 (constant -> STRING .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 30 (constant -> STRING .)
    DECIMAL         reduce using rule 30 (constant -> STRING .)
    TILDE           reduce using rule 30 (constant -> STRING .)


state 38

    (20) literal -> term EQUAL term .

    QUESTION_MARK   reduce using rule 20 (literal -> term EQUAL term .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 20 (literal -> term EQUAL term .)
    DECIMAL         reduce using rule 20 (literal -> term EQUAL term .)
    TILDE           reduce using rule 20 (literal -> term EQUAL term .)
    COMMA           reduce using rule 20 (literal -> term EQUAL term .)


state 39

    (21) literal -> term NOT_EQUAL term .

    QUESTION_MARK   reduce using rule 21 (literal -> term NOT_EQUAL term .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 21 (literal -> term NOT_EQUAL term .)
    DECIMAL         reduce using rule 21 (literal -> term NOT_EQUAL term .)
    TILDE           reduce using rule 21 (literal -> term NOT_EQUAL term .)
    COMMA           reduce using rule 21 (literal -> term NOT_EQUAL term .)


state 40

    (22) literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER . LEFT_BRACKET terms RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 44


state 41

    (15) body -> literal COMMA . body
    (15) body -> . literal COMMA body
    (16) body -> . literal
    (17) literal -> . predicate LEFT_BRACKET RIGHT_BRACKET
    (18) literal -> . predicate LEFT_BRACKET terms RIGHT_BRACKET
    (19) literal -> . predicate
    (20) literal -> . term EQUAL term
    (21) literal -> . term NOT_EQUAL term
    (22) literal -> . VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET
    (23) predicate -> . IDENTIFIER
    (24) predicate -> . STRING
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 14
    IDENTIFIER      shift and go to state 11
    STRING          shift and go to state 15
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    literal                        shift and go to state 29
    body                           shift and go to state 45
    predicate                      shift and go to state 12
    term                           shift and go to state 13
    constant                       shift and go to state 16

state 42

    (18) literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .

    QUESTION_MARK   reduce using rule 18 (literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 18 (literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .)
    DECIMAL         reduce using rule 18 (literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .)
    TILDE           reduce using rule 18 (literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .)
    COMMA           reduce using rule 18 (literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET .)


state 43

    (25) terms -> term COMMA . terms
    (25) terms -> . term COMMA terms
    (26) terms -> . term
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 37
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    term                           shift and go to state 34
    terms                          shift and go to state 46
    constant                       shift and go to state 16

state 44

    (22) literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET . terms RIGHT_BRACKET
    (25) terms -> . term COMMA terms
    (26) terms -> . term
    (27) term -> . VARIABLE
    (28) term -> . constant
    (29) constant -> . IDENTIFIER
    (30) constant -> . STRING
    (31) constant -> . INTEGER
    (32) constant -> . BOOLEAN

    VARIABLE        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 37
    INTEGER         shift and go to state 17
    BOOLEAN         shift and go to state 18

    terms                          shift and go to state 47
    term                           shift and go to state 34
    constant                       shift and go to state 16

state 45

    (15) body -> literal COMMA body .

    DECIMAL         reduce using rule 15 (body -> literal COMMA body .)
    TILDE           reduce using rule 15 (body -> literal COMMA body .)


state 46

    (25) terms -> term COMMA terms .

    RIGHT_BRACKET   reduce using rule 25 (terms -> term COMMA terms .)


state 47

    (22) literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 48


state 48

    (22) literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .

    QUESTION_MARK   reduce using rule 22 (literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .)
    HEAD_AND_BODY_SEPARATOR reduce using rule 22 (literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .)
    DECIMAL         reduce using rule 22 (literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .)
    TILDE           reduce using rule 22 (literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .)
    COMMA           reduce using rule 22 (literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> statement)
WARNING: rejected rule (empty -> <empty>) in state 2
