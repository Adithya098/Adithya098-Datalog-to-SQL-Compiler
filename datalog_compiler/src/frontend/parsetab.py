
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN COMMA COMMENT DATETIME DECIMAL DIVISION EQUAL FLOAT FUNCTION HEAD_AND_BODY_SEPARATOR IDENTIFIER IGNORE INTEGER LEFT_BRACKET LESS_THAN LESS_THAN_OR_EQUAL_TO MINUS MORE_THAN MORE_THAN_OR_EQUAL_TO MULTIPLY NOT_EQUAL NOT_EQUAL_ALT PLUS QUESTION_MARK RIGHT_BRACKET STRING TILDE VARIABLE\n    program : statement program\n            | statement\n            | empty\n    empty :\n    statement : assertion\n              | retraction\n              | query\n              | requirement\n    \n    assertion : clause DECIMAL\n    \n    retraction : clause TILDE\n    \n    query : literal QUESTION_MARK\n    \n    requirement : LEFT_BRACKET IDENTIFIER RIGHT_BRACKET DECIMAL\n    \n    clause : literal HEAD_AND_BODY_SEPARATOR body\n           | literal\n    \n    body : literal COMMA body\n         | literal\n    \n    literal : predicate LEFT_BRACKET RIGHT_BRACKET\n            | predicate LEFT_BRACKET terms RIGHT_BRACKET\n            | predicate\n            | comparison\n            | VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET\n    \n    predicate : IDENTIFIER\n              | STRING\n    \n    terms : term COMMA terms\n          | term\n    \n    term : VARIABLE\n         | constant\n         | IGNORE\n    \n    constant : IDENTIFIER\n             | STRING\n             | DATETIME\n             | INTEGER\n             | BOOLEAN\n             | FLOAT\n    \n    comparison : comparisonterms EQUAL comparisonterms\n               | comparisonterms NOT_EQUAL comparisonterms\n               | comparisonterms LESS_THAN comparisonterms\n               | comparisonterms MORE_THAN comparisonterms\n               | comparisonterms LESS_THAN_OR_EQUAL_TO comparisonterms\n               | comparisonterms MORE_THAN_OR_EQUAL_TO comparisonterms\n               | comparisonterms NOT_EQUAL_ALT comparisonterms\n    \n    comparisonterms : comparisonterm\n                    | comparisonterm PLUS comparisonterms\n                    | comparisonterm MINUS comparisonterms\n                    | comparisonterm DIVISION comparisonterms\n                    | comparisonterm MULTIPLY comparisonterms\n    \n    comparisonterm : term\n                   | function LEFT_BRACKET RIGHT_BRACKET\n                   | function LEFT_BRACKET terms RIGHT_BRACKET\n    \n    function : FUNCTION\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,27,28,29,30,71,],[-4,0,-2,-3,-5,-6,-7,-8,-1,-9,-10,-11,-12,]),'LEFT_BRACKET':([0,2,4,5,6,7,11,12,15,19,22,28,29,30,56,71,],[10,10,-5,-6,-7,-8,-22,33,-23,46,-50,-9,-10,-11,74,-12,]),'VARIABLE':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[14,14,-5,-6,-7,-8,-9,-10,-11,14,53,53,53,53,53,53,53,53,53,53,53,53,53,14,-12,53,53,]),'IDENTIFIER':([0,2,4,5,6,7,10,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[11,11,-5,-6,-7,-8,32,-9,-10,-11,11,54,56,54,54,54,54,54,54,54,54,54,54,54,54,11,-12,54,54,]),'STRING':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[15,15,-5,-6,-7,-8,-9,-10,-11,15,55,55,55,55,55,55,55,55,55,55,55,55,55,15,-12,55,55,]),'IGNORE':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[21,21,-5,-6,-7,-8,-9,-10,-11,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-12,21,21,]),'FUNCTION':([0,2,4,5,6,7,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,70,71,],[22,22,-5,-6,-7,-8,-9,-10,-11,22,22,22,22,22,22,22,22,22,22,22,22,22,-12,]),'DATETIME':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[23,23,-5,-6,-7,-8,-9,-10,-11,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-12,23,23,]),'INTEGER':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[24,24,-5,-6,-7,-8,-9,-10,-11,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-12,24,24,]),'BOOLEAN':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[25,25,-5,-6,-7,-8,-9,-10,-11,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-12,25,25,]),'FLOAT':([0,2,4,5,6,7,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,71,73,74,],[26,26,-5,-6,-7,-8,-9,-10,-11,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-12,26,26,]),'DECIMAL':([8,9,11,12,13,15,17,18,20,21,23,24,25,26,47,48,49,50,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,72,75,76,79,],[28,-14,-22,-19,-20,-23,-42,-47,-27,-28,-31,-32,-33,-34,-16,-13,71,-17,-26,-29,-30,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45,-46,-48,-18,-49,-15,-21,]),'TILDE':([8,9,11,12,13,15,17,18,20,21,23,24,25,26,47,48,50,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,72,75,76,79,],[29,-14,-22,-19,-20,-23,-42,-47,-27,-28,-31,-32,-33,-34,-16,-13,-17,-26,-29,-30,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45,-46,-48,-18,-49,-15,-21,]),'QUESTION_MARK':([9,11,12,13,15,17,18,20,21,23,24,25,26,50,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,72,75,79,],[30,-22,-19,-20,-23,-42,-47,-27,-28,-31,-32,-33,-34,-17,-26,-29,-30,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45,-46,-48,-18,-49,-21,]),'HEAD_AND_BODY_SEPARATOR':([9,11,12,13,14,15,17,18,20,21,23,24,25,26,50,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,72,75,79,],[31,-22,-19,-20,34,-23,-42,-47,-27,-28,-31,-32,-33,-34,-17,-26,-29,-30,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45,-46,-48,-18,-49,-21,]),'COMMA':([11,12,13,15,17,18,20,21,23,24,25,26,47,50,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,72,75,79,],[-22,-19,-20,-23,-42,-47,-27,-28,-31,-32,-33,-34,70,-17,73,-26,-29,-30,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45,-46,-48,-18,-49,-21,]),'PLUS':([11,14,15,17,18,20,21,23,24,25,26,53,54,55,68,75,],[-29,-26,-30,42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-48,-49,]),'MINUS':([11,14,15,17,18,20,21,23,24,25,26,53,54,55,68,75,],[-29,-26,-30,43,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-48,-49,]),'DIVISION':([11,14,15,17,18,20,21,23,24,25,26,53,54,55,68,75,],[-29,-26,-30,44,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-48,-49,]),'MULTIPLY':([11,14,15,17,18,20,21,23,24,25,26,53,54,55,68,75,],[-29,-26,-30,45,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-48,-49,]),'EQUAL':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,35,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'NOT_EQUAL':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,36,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'LESS_THAN':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,37,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'MORE_THAN':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,38,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'LESS_THAN_OR_EQUAL_TO':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,39,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'MORE_THAN_OR_EQUAL_TO':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,40,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'NOT_EQUAL_ALT':([11,14,15,16,17,18,20,21,23,24,25,26,53,54,55,64,65,66,67,68,75,],[-29,-26,-30,41,-42,-47,-27,-28,-31,-32,-33,-34,-26,-29,-30,-43,-44,-45,-46,-48,-49,]),'RIGHT_BRACKET':([20,21,23,24,25,26,32,33,46,51,52,53,54,55,69,77,78,],[-27,-28,-31,-32,-33,-34,49,50,68,72,-25,-26,-29,-30,75,-24,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,27,]),'statement':([0,2,],[2,2,]),'empty':([0,2,],[3,3,]),'assertion':([0,2,],[4,4,]),'retraction':([0,2,],[5,5,]),'query':([0,2,],[6,6,]),'requirement':([0,2,],[7,7,]),'clause':([0,2,],[8,8,]),'literal':([0,2,31,70,],[9,9,47,47,]),'predicate':([0,2,31,70,],[12,12,12,12,]),'comparison':([0,2,31,70,],[13,13,13,13,]),'comparisonterms':([0,2,31,35,36,37,38,39,40,41,42,43,44,45,70,],[16,16,16,57,58,59,60,61,62,63,64,65,66,67,16,]),'comparisonterm':([0,2,31,35,36,37,38,39,40,41,42,43,44,45,70,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'term':([0,2,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,73,74,],[18,18,18,52,18,18,18,18,18,18,18,18,18,18,18,52,18,52,52,]),'function':([0,2,31,35,36,37,38,39,40,41,42,43,44,45,70,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'constant':([0,2,31,33,35,36,37,38,39,40,41,42,43,44,45,46,70,73,74,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'body':([31,70,],[48,76,]),'terms':([33,46,73,74,],[51,69,77,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement program','program',2,'p_program','parser.py',7),
  ('program -> statement','program',1,'p_program','parser.py',8),
  ('program -> empty','program',1,'p_program','parser.py',9),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',19),
  ('statement -> assertion','statement',1,'p_statement','parser.py',24),
  ('statement -> retraction','statement',1,'p_statement','parser.py',25),
  ('statement -> query','statement',1,'p_statement','parser.py',26),
  ('statement -> requirement','statement',1,'p_statement','parser.py',27),
  ('assertion -> clause DECIMAL','assertion',2,'p_assertion','parser.py',33),
  ('retraction -> clause TILDE','retraction',2,'p_retraction','parser.py',39),
  ('query -> literal QUESTION_MARK','query',2,'p_query','parser.py',45),
  ('requirement -> LEFT_BRACKET IDENTIFIER RIGHT_BRACKET DECIMAL','requirement',4,'p_requirement','parser.py',51),
  ('clause -> literal HEAD_AND_BODY_SEPARATOR body','clause',3,'p_clause','parser.py',57),
  ('clause -> literal','clause',1,'p_clause','parser.py',58),
  ('body -> literal COMMA body','body',3,'p_body','parser.py',67),
  ('body -> literal','body',1,'p_body','parser.py',68),
  ('literal -> predicate LEFT_BRACKET RIGHT_BRACKET','literal',3,'p_literal','parser.py',77),
  ('literal -> predicate LEFT_BRACKET terms RIGHT_BRACKET','literal',4,'p_literal','parser.py',78),
  ('literal -> predicate','literal',1,'p_literal','parser.py',79),
  ('literal -> comparison','literal',1,'p_literal','parser.py',80),
  ('literal -> VARIABLE HEAD_AND_BODY_SEPARATOR IDENTIFIER LEFT_BRACKET terms RIGHT_BRACKET','literal',6,'p_literal','parser.py',81),
  ('predicate -> IDENTIFIER','predicate',1,'p_predicate','parser.py',94),
  ('predicate -> STRING','predicate',1,'p_predicate','parser.py',95),
  ('terms -> term COMMA terms','terms',3,'p_terms','parser.py',101),
  ('terms -> term','terms',1,'p_terms','parser.py',102),
  ('term -> VARIABLE','term',1,'p_term','parser.py',111),
  ('term -> constant','term',1,'p_term','parser.py',112),
  ('term -> IGNORE','term',1,'p_term','parser.py',113),
  ('constant -> IDENTIFIER','constant',1,'p_constant','parser.py',119),
  ('constant -> STRING','constant',1,'p_constant','parser.py',120),
  ('constant -> DATETIME','constant',1,'p_constant','parser.py',121),
  ('constant -> INTEGER','constant',1,'p_constant','parser.py',122),
  ('constant -> BOOLEAN','constant',1,'p_constant','parser.py',123),
  ('constant -> FLOAT','constant',1,'p_constant','parser.py',124),
  ('comparison -> comparisonterms EQUAL comparisonterms','comparison',3,'p_comparison','parser.py',130),
  ('comparison -> comparisonterms NOT_EQUAL comparisonterms','comparison',3,'p_comparison','parser.py',131),
  ('comparison -> comparisonterms LESS_THAN comparisonterms','comparison',3,'p_comparison','parser.py',132),
  ('comparison -> comparisonterms MORE_THAN comparisonterms','comparison',3,'p_comparison','parser.py',133),
  ('comparison -> comparisonterms LESS_THAN_OR_EQUAL_TO comparisonterms','comparison',3,'p_comparison','parser.py',134),
  ('comparison -> comparisonterms MORE_THAN_OR_EQUAL_TO comparisonterms','comparison',3,'p_comparison','parser.py',135),
  ('comparison -> comparisonterms NOT_EQUAL_ALT comparisonterms','comparison',3,'p_comparison','parser.py',136),
  ('comparisonterms -> comparisonterm','comparisonterms',1,'p_comparisonterms','parser.py',142),
  ('comparisonterms -> comparisonterm PLUS comparisonterms','comparisonterms',3,'p_comparisonterms','parser.py',143),
  ('comparisonterms -> comparisonterm MINUS comparisonterms','comparisonterms',3,'p_comparisonterms','parser.py',144),
  ('comparisonterms -> comparisonterm DIVISION comparisonterms','comparisonterms',3,'p_comparisonterms','parser.py',145),
  ('comparisonterms -> comparisonterm MULTIPLY comparisonterms','comparisonterms',3,'p_comparisonterms','parser.py',146),
  ('comparisonterm -> term','comparisonterm',1,'p_comparisionterm','parser.py',155),
  ('comparisonterm -> function LEFT_BRACKET RIGHT_BRACKET','comparisonterm',3,'p_comparisionterm','parser.py',156),
  ('comparisonterm -> function LEFT_BRACKET terms RIGHT_BRACKET','comparisonterm',4,'p_comparisionterm','parser.py',157),
  ('function -> FUNCTION','function',1,'p_function','parser.py',168),
]
